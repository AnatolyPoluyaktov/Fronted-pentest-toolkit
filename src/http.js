import Axios from 'axios';
import Vue from 'vue';

export default {
    urls: {
        "Domains": "/common/domains/",
        "Projects": "/common/projects/",
        "Ips": "/common/ips/",
        "Services": "/common/services/",
        "Subdomains": "/common/subdomains/",
        "Subnets": "/common/subnets/",
        "Vulnerabilties": "/common/vulnerabilities/",
        "WebOrigins": "/common/web-origins/",
    },

    getHeaders() {
        console.log("token", localStorage.getItem("token"))
        return {
            'X-CSRFToken': Vue.$cookies.get('csrftoken'),
            'Authorization': `Bearer ${localStorage.getItem("token")}`
        }
    },
    getList: async function (url_name, filters = {}, raise_exception = false) {
        console.log("filters", filters)
        try {
            return (await Axios.get(`${this.urls[url_name] || url_name}`, {params: filters, headers: this.getHeaders() }))
        } catch (error) {
            if (raise_exception) {
                Vue.showErrorModal(error.response.data);
                return { data: [] }
            }
            return error.response;
        }
    },
    getItem: async function (url_name, id, raise_exception = false) {
        try {
            return (await Axios.get(`${this.urls[url_name] || url_name}${id}/`, { headers: this.getHeaders() }))
        } catch (error) {
            if (raise_exception) {
                Vue.showErrorModal(error.response.data);
                return { data: {} }
            }
            return error.response;
        }
    },
    createItem: async function (url_name, data, raise_exception = false) {
        try {
            return (await Axios.post(`${this.urls[url_name] || url_name}`, data, { headers: this.getHeaders() }))
        } catch (error) {
            if (raise_exception) {
                Vue.showErrorModal(error.response.data);
                return { data: data };
            }
            return error.response;
        }
    },
    updateItem: async function (url_name, id, data, raise_exception = false) {
        try {
            return (await Axios.put(`${this.urls[url_name] || url_name}${id}/`, data, { headers: this.getHeaders() }))
        } catch (error) {
            if (raise_exception) {
                Vue.showErrorModal(error.response.data);
                return { data: data };
            }
            return error.response;
        }
    },
    deleteItem: async function (url_name, id, raise_exception = false) {
        try {
            return (await Axios.delete(`${this.urls[url_name] || url_name}${id}/`, { headers: this.getHeaders() }))
        } catch (error) {
            if (raise_exception) {
                Vue.showErrorModal(error.response.data);
            }
            return error.response;
        }
    },
    dowload_csv_services: async function (url_name, id, raise_exception = false) {
        try {
            let headers = this.getHeaders();
            headers["Content-Disposition"] = "attachment;filename=myfilename.csv"
            return (await Axios.get(`${this.urls[url_name] || url_name}${id}/service/report`, { headers: headers }))
        } catch (error) {
            if (raise_exception) {
                Vue.showErrorModal(error.response.data);
                return { data: {} }
            }
            return error.response;
        }
    },

}
